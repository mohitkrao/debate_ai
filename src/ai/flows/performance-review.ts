// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that analyzes debate responses and provides a rating and constructive feedback.
 *
 * - performanceReview - A function that handles the performance review process.
 * - PerformanceReviewInput - The input type for the performanceReview function.
 * - PerformanceReviewOutput - The return type for the performanceReview function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const PerformanceReviewInputSchema = z.object({
  debateTopic: z.string().describe('The topic of the debate.'),
  userStance: z.string().describe('The user\'s stance in the debate (for or against).'),
  expertiseLevel: z.string().describe('The user\'s expertise level (e.g., high school, college, PhD).'),
  debateDifficulty: z.string().describe('The difficulty level of the debate.'),
  debateResponses: z.array(z.string()).describe('An array of the user\'s debate responses.'),
});
export type PerformanceReviewInput = z.infer<typeof PerformanceReviewInputSchema>;

const PerformanceReviewOutputSchema = z.object({
  rating: z.number().describe('A rating of the user\'s performance in the debate.'),
  feedback: z.string().describe('Constructive feedback on the user\'s debate performance.'),
});
export type PerformanceReviewOutput = z.infer<typeof PerformanceReviewOutputSchema>;

export async function performanceReview(input: PerformanceReviewInput): Promise<PerformanceReviewOutput> {
  return performanceReviewFlow(input);
}

const prompt = ai.definePrompt({
  name: 'performanceReviewPrompt',
  input: {
    schema: z.object({
      debateTopic: z.string().describe('The topic of the debate.'),
      userStance: z.string().describe('The user\'s stance in the debate (for or against).'),
      expertiseLevel: z.string().describe('The user\'s expertise level (e.g., high school, college, PhD).'),
      debateDifficulty: z.string().describe('The difficulty level of the debate.'),
      debateResponses: z.array(z.string()).describe('An array of the user\'s debate responses.'),
    }),
  },
  output: {
    schema: z.object({
      rating: z.number().describe('A rating of the user\'s performance in the debate.'),
      feedback: z.string().describe('Constructive feedback on the user\'s debate performance.'),
    }),
  },
  prompt: `You are an AI debate performance reviewer. Analyze the user\'s debate responses and provide a rating and constructive feedback.

Debate Topic: {{{debateTopic}}}
User Stance: {{{userStance}}}
Expertise Level: {{{expertiseLevel}}}
Debate Difficulty: {{{debateDifficulty}}}

Debate Responses:
{{#each debateResponses}}
- {{{this}}}
{{/each}}

Provide a rating (out of 10) and constructive feedback to help the user understand their strengths and weaknesses and identify areas for improvement.
Ensure the rating is a number and the feedback is clear and concise.
`,
});

const performanceReviewFlow = ai.defineFlow<
  typeof PerformanceReviewInputSchema,
  typeof PerformanceReviewOutputSchema
>({
  name: 'performanceReviewFlow',
  inputSchema: PerformanceReviewInputSchema,
  outputSchema: PerformanceReviewOutputSchema,
}, async input => {
  const {output} = await prompt(input);
  return output!;
});
